= CMS plugin

Content Management System plugin.

CMS plugin provides your Rails application with a "Posting framework". You can define three types of behaviours in your ActiveRecord models:
* Agents (acts_as_agent): entities that have posting capabilities. Users are the paradigm of Agents.
* Contents (acts_as_content): units of information that can be posted. Examples of contents are articles, images, events, links, audios, videos, files, etc...
* Containers (acts_as_container): spaces where agents posts contents

CMS plugin follows the SIOC ontology model, http://sioc-project.org/ontology

Project page: http://rubyforge.org/projects/cmsplugin

== Features

* Agents authentication: Login/Password, OpenID
* Agents activation: Email validation, Password reset
* Atom feeds support (RFC 4287)
* AtomPub protocol support (RFC 5023)
* Support for multiple Agents, Containers and Contents
* Categories
* Sortable lists for models (acts_as_sortable)

== Requirements

* Rails 2.1
* RubyGems: 
  * ruby-openid
  * atom-tools
  * hpricot
  * will_paginate
* Rails Plugins:
  * engines
  * globalize
  * attachment_fu

== Installation

=== Plugins

You first need Rails Engines:
  script/plugin install git://github.com/lazyatom/engines.git
see vendor/plugins/engines/README to finish the instalation

Other plugins you need;

AttachmentFu:
  script/plugin install git://github.com/technoweenie/attachment_fu.git

Globalize (CMSplugin version; works with Rails 2.1 and fixes some bugs.
This requirement will disapear when Rails supports globalize):
  script/plugin install http://cmsplugin.rubyforge.org/svn/globalize

To install CMS plugin, run:
  script/plugin install svn://rubyforge.org/var/svn/cmsplugin/trunk

=== Gems

Run rake gems:install to install the required gems

=== CMS

Generate the CMS infraestructure:
  script/generate cms

And generate and run the migration:
  script/generate plugin_migration

Now you can generate Agents and Contents

== Agents
An Agent has the capability to post Contents to Containers. An User is the example of Agent

  script/generate agent Model

== Contents
A Content is a piece of information suitable to be posted to some Container by some Agent

  script/generate content Model attributes

== Containers
A Container hold Posts

For example, a User could also be defined as a Container. In this way, every user would be able to post each own Contents.

== Examples

=== Blog
Create personal blogs with a pair of commands:

  script/generate agent User
  script/generate content Article body:text

Users now can post their own Articles

You can add AtomPub support for Articles creation. You must implement atom_entry_filter method in Article model:

  def self.atom_entry_filter(entry)
    { :body => entry.content.xml.to_s }
  end


=== Gallery
Install attachment_fu plugin

Generate photo content:

  script/generate content Photo size:integer content_type:string filename:string height:integer width:integer parent_id:integer thumbnail:string db_file_id:integer

Modify the migration and include db_files table:

  create_table :db_files do |t|
    t.binary :data
  end

and

  drop_table :db_files

Add has_attachment information in the model:

  class Photo < ActiveRecord::Base
    has_attachment :content_type => :image,
                   :thumbnails => { :thumb => [64,64] }

    validates_as_attachment

    acts_as_content :named_collection => "Gallery",
                    :has_media => :attachment_fu,
                    :disposition => :inline,
                    :atompub_mime_types => attachment_options[:content_type].join(", ")

  end

Add Mime Types to your config/initializers/mime_types.rb

  Mime::Type.register "image/jpeg", :jpeg, [ "image/pjpeg" ]
  Mime::Type.register "image/gif", :gif
  Mime::Type.register "image/png", :png, [ "image/x-png" ]

== TODO

* Agents authentication support: OAuth
* Microformats
* Tags
* OpenID server
* RDF: FOAF + SIOC 


Copyright (c) 2008 Antonio Tapiador, released under the LGPL license
