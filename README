= CMS plugin

Content Management System plugin. CMSplugin is to Rails in CMS like Rails is to Ruby in Web Development.

  Ruby + Web Development = Rails
  Rails + CMS = CMSplugin

CMSplugin your Rails application with a "CMS framework". That means authentication, authorization, roles, permissions, categories, tags, etc... but from a very flexible scope.

You can define functionality in your ActiveRecord classes:
Resource:: a model that have, at least, CRUD operations and can be imported/exported in different formats.
Content:: a Resource that belongs to a Container.
Container:: a model that host Contents.
Agent:: a model with authentication, authorization and potencial to perform actions over Resources.
Stage:: a model that defines an Authorization framework for Agents.

CMSplugin follows the SIOC ontology model, http://sioc-project.org/ontology

Project page: http://rubyforge.org/projects/cmsplugin

== Features

* Authentication: Login/Password, OpenID, Central Authentication Service (CAS), CookieToken
* Authorization: Roles and Permisssions
* Activation: Email validation, Password reset
* Atom feeds (RFC 4287)
* AtomPub protocol (RFC 5023)
* Taxonomies: Categories, Categories Domains
* Folksonomies: Tags, Taggable models (acts_as_taggable)
* Sortable lists for models (acts_as_sortable)
* Logotypes for models (acts_as_logotypable)
* Permissions and Roles in any model (acts_as_stage)

== Requirements

* Rails 2.2.2
* RubyGems: 
  * ruby-openid
  * atom-tools
  * hpricot
  * will_paginate
  * atd-attachment_fu
* Rails Plugins:
  * engines

== Installation

=== Plugins

You first need Rails Engines:
  script/plugin install git://github.com/atd/engines.git
see vendor/plugins/engines/README to finish the instalation (don't forget to modify config/environment.rb)

To install CMSplugin, run:
  script/plugin install svn://rubyforge.org/var/svn/cmsplugin/trunk

=== Gems

Run rake gems:install to install the required gems

=== CMS

Generate the CMS infraestructure:
  script/generate cms

And generate and run the migration:
  script/generate plugin_migration

Now you can generate Agents, Contents and Containers

== Agents
An Agent has the capability to post Contents to Containers. An User is the example of Agent

  script/generate agent Model

== Contents
A Content is a piece of information suitable to be posted to some Container by some Agent

  script/generate content Model attributes

== Containers
A Container hold Entries

For example, a User could also be defined as a Container. In this way, every user would be able to entry each own Contents.

== Examples

=== Blog
Create personal blogs with a pair of commands:

  script/generate agent User
  script/generate content Article body:text

Users now can entry their own Articles

You can add AtomPub support for Articles creation. You must implement atom_parser method in Article model:

  def self.atom_parser(data)
    entry = Atom::Entry.new(data)

    { :body => entry.content.xml.to_s }
  end

== TODO

* Agents authentication support: OAuth
* Microformats
* OpenID server
* RDF: FOAF + SIOC 


Copyright (c) 2008 Antonio Tapiador, released under the LGPL license
